from love use love
use gfx
from gfx use (stableRandomColor as rcol)
use input
use sfx

Piece :: enum
    Black,
    White,
    Empty,
end

grid_size :: 31.

screen_to_board :: fn offset, size, mouseCoords ->
    shifted :: (mouseCoords - offset) * (1 / size[0], 1 / size[1])
    (floor(shifted[0]), floor(shifted[1]))
end

board_to_screen :: fn offset, size, coord ->
    offset + size * (as_float(coord[0]), as_float(coord[1]))
end

start :: fn do

    aFont :: gfx.createFont(love.graphics.getFont())
    board_img :: gfx.newImage' "res/board.png"
    black_img :: gfx.newImage' "res/black.png"
    white_img :: gfx.newImage' "res/white.png"


    board := [ ]

    y := 0
    loop y < 8 do
        board -> list.push' [Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty]
        y += 1
    end

    board[3][3] = Piece.Black
    board[4][3] = Piece.White
    board[3][4] = Piece.White
    board[4][4] = Piece.Black

    draw_board :: fn pos, scale do
        top_left_offset :: pos + (13., 13.)
        size :: (grid_size, grid_size) * scale
        board_img.draw' pos, 0.0, scale
        x := 0
        loop x < 8 do
            y := 0
            loop y < 8 do
                offset :: board_to_screen' top_left_offset, size, (x, y)
                case board[y][x] do
                    Black -> black_img.draw(offset, 0.0, scale) end
                    White -> white_img.draw(offset, 0.0, scale) end
                    Empty -> end
                end

                y += 1
            end
            x += 1
        end

        active :: screen_to_board' top_left_offset, size, input.mousePos()
        if 0 <= active[0] and active[0] < 8
          and 0 <= active[1] and active[1] < 8 do
            // TODO(ed): We need to fix this
            offset :: board_to_screen' top_left_offset, size, active
            gfx.drawCircle' gfx.rgba(0., 0., 0., 0.2), offset + size * (0.5, 0.5), (size[0] - 5.0) / 2
        end
    end

    love.update = fn delta do
    end

    love.draw = fn do
        draw_board' (0.0, 0.0), (2., 2.)
    end

    love.keypressed = fn key, scancode, repeat do
    end

    love.keyreleased = fn key, scancode do
    end
end
