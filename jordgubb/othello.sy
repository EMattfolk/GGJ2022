from love use love
use gfx
from gfx use (stableRandomColor as rcol)
use input
use sfx

// TODO:
//  - Some particles when you flip, maybe even screen shake?
//  - A menu or intro screen?
//  - Fix the sounds
//  - Add some music
//  - Add in an AI?

Scene :: enum
    Game State,
    Menu,
end

Piece :: enum
    Black,
    White,
    Empty,
end

other_color :: fn piece ->
    case piece do
        Black -> Piece.Black end
        White -> Piece.White end
        Empty -> <!> end
    end
end

grid_size :: 31.
dirs :: [(1, 0), (0, 1), (1, 1), (-1, 0), (0, -1), (-1, -1), (-1, 1), (1, -1)]

valid_coord :: fn coord ->
    (0 <= coord[0] and coord[0] < 8 and
     0 <= coord[1] and coord[1] < 8)
end

any :: fn l: [*A], pred: fn *A -> bool -> bool
    result := false
    l -> for_each' fn x ->
        result = result or pred' x
    end
    result
end

board_at :: fn board, coord ->
    board[coord[1]][coord[0]]
end

board_place :: fn state: State, coord, piece, stagger ->
    x :: coord[0]
    y :: coord[1]
    current :: state.board[y][x]
    if current == Piece.Empty do
        case piece do
            Black -> state.animation[y][x] = 0.0 end
            White -> state.animation[y][x] = 1.0 end
            Empty -> end
        end
    end

    if current == Piece.White and state.animation[y][x] == 1.0 do
        state.animation[y][x] += stagger
    else do if current == Piece.Black and state.animation[y][x] == 0.0 do
        state.animation[y][x] -= stagger
    end
    end

    state.board[y][x] = piece
end

valid_placement :: fn board, coord, piece ->
    other :: if piece == Piece.Black do Piece.White else Piece.Black end
    (valid_coord(coord)
     and board_at(board, coord) == Piece.Empty
     and any' dirs, fn delta ->
        p :: coord + delta
        valid_coord(p) and board_at(board, p) == other and exists_in_dir(board, p, delta, piece)
     end)
end

exists_in_dir :: fn board, coord, dir, piece ->
    p := coord
    loop valid_coord(p) and board_at(board, p) != Piece.Empty do
        if board_at(board, p) == piece do
            ret true
        end
        p += dir
    end
    false
end

board_is_full :: fn board ->
    x := 0
    loop x < 8 do
        y := 0
        loop y < 8 do
            if board_at(board, (x, y)) == Piece.Empty do ret false end
            y += 1
        end
        x += 1
    end
    ret true
end

count_pieces :: fn board ->
    blacks := 0
    whites := 0
    x := 0
    loop x < 8 do
        y := 0
        loop y < 8 do
            piece :: board_at(board, (x, y))
            if piece == Piece.White do
                whites += 1
            else do if piece == Piece.Black do
                    blacks += 1
                end
            end
            y += 1
        end
        x += 1
    end
    (blacks, whites)
end

screen_to_board :: fn offset, size, mouseCoords ->
    shifted :: (mouseCoords - offset) * (1 / size[0], 1 / size[1])
    (floor(shifted[0]), floor(shifted[1]))
end

board_to_screen :: fn offset, size, coord ->
    offset + size * (as_float(coord[0]), as_float(coord[1]))
end

flip_if_matches :: fn state, coord, piece, dir, stagger ->
    if (not valid_coord(coord))
    or board_at(state.board, coord) == Piece.Empty do ret false end

    if board_at(state.board, coord) == other_color(piece)
    or flip_if_matches(state, coord + dir, piece, dir, stagger + 0.25) do
        board_place(state, coord, piece, stagger)
        true
    else
        false
    end
end

place_piece :: fn state, coord, piece ->
    success :: case board_at(state.board, coord) do
        Empty ->
            board_place(state, coord, piece, 0.0)
            true
        end
        White -> false end
        Black -> false end
    end
    if not success do ret success end

    dirs -> for_each' fn dir do
        flip_if_matches' state, coord + dir, piece, dir, 0.0
    end

    audio : sfx.Sound : list.random_choice(place_sfx)
    audio.playp' (0.4, 0.1), (0.9, 1.1)

    success
end

Maybe :: enum
    Just *
    Nothing
end

State :: blob {
    board: [[Piece]],
    animation: [[float]],
    turn: int,
    coord: Maybe, // (Int, Int)
}

place_sfx := []

start :: fn do

    place_sfx = [
        sfx.newSound("res/place001.wav", false, sfx.SoundType.Static),
        sfx.newSound("res/place002.wav", false, sfx.SoundType.Static),
        sfx.newSound("res/place003.wav", false, sfx.SoundType.Static),
        sfx.newSound("res/place004.wav", false, sfx.SoundType.Static),
        sfx.newSound("res/place005.wav", false, sfx.SoundType.Static),
    ]

    piece_img :: gfx.newImage' "res/piece.png"
    piece_ss :: gfx.newImplicitSpriteSheet' piece_img, (26, 26)

    bigFont :: gfx.newFont("res/LibreBaskerville-Italic.ttf", 100)
    smallFont :: gfx.newFont("res/LibreBaskerville-Italic.ttf", 30)
    board_img :: gfx.newImage' "res/board.png"

    draw_board :: fn pos, scale, state do
        top_left_offset :: pos + (7., 7.) * scale
        size :: (grid_size, grid_size) * scale
        board_img.draw' pos, 0.0, scale
        x := 0
        loop x < 8 do
            y := 0
            loop y < 8 do
                offset :: board_to_screen' top_left_offset, size, (x, y)
                anim :: floor' clamp(state.animation[y][x], 0.0, 1.0) * 5.0
                case board_at' state.board, (x, y) do
                    Black -> piece_ss.draw' gfx.white, anim, offset, 0.0, scale end
                    White -> piece_ss.draw' gfx.white, anim, offset, 0.0, scale end
                    Empty -> end
                end

                y += 1
            end
            x += 1
        end

        x := 0
        loop x < 8 do
            at :: (14., 7.) + board_to_screen' top_left_offset, size, (x, -1)
            smallFont.drawText' gfx.white, as_str(x + 1), at
            x += 1
        end

        y := 0
        letters :: ["a", "b", "c", "d", "e", "f", "g", "h"]
        loop y < 8 do
            at :: (14., 7.) + board_to_screen' top_left_offset, size, (-1, y)
            smallFont.drawText' gfx.white, letters[y], at
            y += 1
        end

        case state.coord do
            Just coord ->
                offset :: board_to_screen' top_left_offset, size, coord
                to_place :: if state.turn == 0 do Piece.Black else Piece.White end
                color :: gfx.rgba(1.0, 1.0, 1.0, 0.5)
                case to_place do
                    Black -> piece_ss.draw' color, 0, offset, 0.0, scale end
                    White -> piece_ss.draw' color, 5, offset, 0.0, scale end
                    Empty -> end
                end
            end
            else do end
        end
    end

    pressed := false
    update_board :: fn delta, pos, scale, state ->
        top_left_offset :: pos + (13., 13.)
        size :: (grid_size, grid_size) * scale

        active :: screen_to_board' top_left_offset, size, input.mousePos()
        to_place :: if state.turn == 0 do Piece.Black else Piece.White end
        coord :: if valid_placement' state.board, active, to_place do
            if pressed
            and place_piece' state, active, to_place do
                state.turn = 1 - state.turn
                Maybe.Nothing
            else
                Maybe.Just active
            end
        else
            Maybe.Nothing
        end

        // Update animation frames
        y := 0
        loop y < 8 do
            x := 0
            loop x < 8 do
                target :: if state.board[y][x] == Piece.White do 1.0 else 0.0 end
                current :: state.animation[y][x]
                diff :: target - current
                if abs(diff) < delta * 2.0 do
                    state.animation[y][x] += diff
                else do
                    state.animation[y][x] += sign(diff) * delta * 2.0
                end
                x += 1
            end
            y += 1
        end

        State { board: state.board, animation: state.animation, coord: coord, turn: state.turn }
    end

    scale :: (2., 2.)
    center :: (gfx.screenSizef() - board_img.getSize() * scale) * (0.5, 0.5)
    pos :: center + (0., 10.)

    inital_state :: fn ->
        state := State { board: [], animation: [], coord: Maybe.Nothing, turn: 0 }
        y := 0
        loop y < 8 do
            state.board -> list.push' [Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty
                                ,Piece.Empty, Piece.Empty, Piece.Empty, Piece.Empty]
            state.animation -> list.push' [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]
            y += 1
        end
        board_place' state, (3, 3), Piece.Black, 0.0
        board_place' state, (4, 3), Piece.White, 0.0
        board_place' state, (3, 4), Piece.White, 0.0
        board_place' state, (4, 4), Piece.Black, 0.0

        state
    end

    state := inital_state'

    scene := Scene.Menu

    love.update = fn delta do
        case scene do
            Game state ->
                state :: update_board' delta, pos, scale, state
                scene = Scene.Game state // Update the state
            end
            Menu -> end
        end
        pressed = false
    end

    love.draw = fn do
        case scene do
            Game state ->
                draw_board' pos, scale, state
                if board_is_full' state.board do
                    text_pos :: (100.0, 100.0)

                    gfx.drawRect' gfx.rgba(0., 0., 0., 0.8), (0., 0.), gfx.screenSizef'
                    bigFont.drawText' gfx.rgb(1., 1., 1.), "Othello", text_pos
                    num_pieces :: count_pieces' state.board
                    message :: if num_pieces[0] == num_pieces[1] do
                        "Tie!"
                    else do if num_pieces[0] > num_pieces[1] do
                            "Black wins!"
                        else do
                            "White wins!"
                        end
                    end
                    message :: message
                    smallFont.drawText' gfx.white, message, text_pos + (10.0, 110.0)

                    center :: gfx.screenSizef() * (0.5, 0.5)
                    smallFont.drawTextF' gfx.white, "Press any button to restart", center - (250., 0.), gfx.Alignment.Center, 500.
                end
            end
            Menu ->
                text_pos :: (100.0, 100.0)
                bigFont.drawText' gfx.white, "Othello", text_pos
                smallFont.drawText' gfx.white, "Press any button to start", text_pos + (10.0, 110.0)
            end
        end
    end

    love.keypressed = fn key, scancode, repeat do
        case scene do
            Game state ->
                if board_is_full' state.board do
                    state :: inital_state'
                    scene = Scene.Game state
                end
            end
            Menu ->
                state :: inital_state'
                scene = Scene.Game state
            end
        end
    end

    love.keyreleased = fn key, scancode do
    end

    love.mousepressed = fn x, y, button, istouch, presses do
        case scene do
            Game state ->
                pressed = button == 1
                if board_is_full' state.board do
                    state :: inital_state'
                    scene = Scene.Game state
                end
            end
            Menu ->
                state :: inital_state'
                scene = Scene.Game state
            end
        end
    end
end
